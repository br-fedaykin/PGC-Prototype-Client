package com.brunoarruda.hyperdcpabe.blockchain;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int64;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

// cSpell:disable
/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
@SuppressWarnings("rawtypes")
public class SmartDCPABEFiles extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_GETFILENAMEBYINDEX = "getFileNameByIndex";

    public static final String FUNC_CHANGEOWNERSHIP = "changeOwnership";

    public static final String FUNC_GETSERVERID = "getServerID";

    public static final String FUNC_NUMSERVERS = "numServers";

    public static final String FUNC_ADDSERVER = "addServer";

    public static final String FUNC_GETRECORDING = "getRecording";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETCONTRACTDEPENDENCIES = "setContractDependencies";

    public static final String FUNC_ADDRECORDING = "addRecording";

    public static final String FUNC_ADDRECORDINGCIPHERTEXT = "addRecordingCiphertext";

    public static final String FUNC_GETCIPHERTEXT = "getCiphertext";

    public static final String FUNC_GETFILECOUNTING = "getFileCounting";

    public static final String FUNC_GETSERVER = "getServer";

    @Deprecated
    protected SmartDCPABEFiles(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SmartDCPABEFiles(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SmartDCPABEFiles(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SmartDCPABEFiles(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> getFileNameByIndex(String addr, BigInteger index) {
        final Function function = new Function(FUNC_GETFILENAMEBYINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr),
                new org.web3j.abi.datatypes.generated.Uint64(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> changeOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_CHANGEOWNERSHIP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getServerID(String domain) {
        final Function function = new Function(FUNC_GETSERVERID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(domain)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> numServers() {
        final Function function = new Function(FUNC_NUMSERVERS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addServer(String domain, String path, BigInteger port) {
        final Function function = new Function(
                FUNC_ADDSERVER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(domain),
                new org.web3j.abi.datatypes.Utf8String(path),
                new org.web3j.abi.datatypes.generated.Uint16(port)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<String, BigInteger, byte[], byte[], BigInteger>> getRecording(String addr, String name) {
        final Function function = new Function(FUNC_GETRECORDING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr),
                new org.web3j.abi.datatypes.Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, byte[], byte[], BigInteger>>(
                new Callable<Tuple5<String, BigInteger, byte[], byte[], BigInteger>>() {
                    @Override
                    public Tuple5<String, BigInteger, byte[], byte[], BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, byte[], byte[], BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (byte[]) results.get(2).getValue(),
                                (byte[]) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple5<String, BigInteger, byte[], byte[], BigInteger>> getRecording(String addr, BigInteger index) {
        final Function function = new Function(FUNC_GETRECORDING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr),
                new org.web3j.abi.datatypes.generated.Uint64(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, byte[], byte[], BigInteger>>(
                new Callable<Tuple5<String, BigInteger, byte[], byte[], BigInteger>>() {
                    @Override
                    public Tuple5<String, BigInteger, byte[], byte[], BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, byte[], byte[], BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (byte[]) results.get(2).getValue(),
                                (byte[]) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setContractDependencies(BigInteger contractType, String addr) {
        final Function function = new Function(
                FUNC_SETCONTRACTDEPENDENCIES,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(contractType),
                new org.web3j.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addRecording(String addr, String filename, BigInteger serverID, byte[] uRIPathname, byte[] hashing, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_ADDRECORDING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr),
                new org.web3j.abi.datatypes.Utf8String(filename),
                new org.web3j.abi.datatypes.generated.Uint64(serverID),
                new org.web3j.abi.datatypes.generated.Bytes32(uRIPathname),
                new org.web3j.abi.datatypes.generated.Bytes32(hashing),
                new org.web3j.abi.datatypes.generated.Uint64(timestamp)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addRecordingCiphertext(String addr, String fileName, String policy, byte[] c0, byte[] c1, byte[] c2, byte[] c3) {
        final Function function = new Function(
                FUNC_ADDRECORDINGCIPHERTEXT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr),
                new org.web3j.abi.datatypes.Utf8String(fileName),
                new org.web3j.abi.datatypes.Utf8String(policy),
                new org.web3j.abi.datatypes.DynamicBytes(c0),
                new org.web3j.abi.datatypes.DynamicBytes(c1),
                new org.web3j.abi.datatypes.DynamicBytes(c2),
                new org.web3j.abi.datatypes.DynamicBytes(c3)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<String, byte[], byte[], byte[], byte[]>> getCiphertext(String addr, String fileName) {
        final Function function = new Function(FUNC_GETCIPHERTEXT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr),
                new org.web3j.abi.datatypes.Utf8String(fileName)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        return new RemoteCall<Tuple5<String, byte[], byte[], byte[], byte[]>>(
                new Callable<Tuple5<String, byte[], byte[], byte[], byte[]>>() {
                    @Override
                    public Tuple5<String, byte[], byte[], byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, byte[], byte[], byte[], byte[]>(
                                (String) results.get(0).getValue(),
                                (byte[]) results.get(1).getValue(),
                                (byte[]) results.get(2).getValue(),
                                (byte[]) results.get(3).getValue(),
                                (byte[]) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getFileCounting(String addr) {
        final Function function = new Function(FUNC_GETFILECOUNTING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<String, String, BigInteger>> getServer(BigInteger index) {
        final Function function = new Function(FUNC_GETSERVER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple3<String, String, BigInteger>>(
                new Callable<Tuple3<String, String, BigInteger>>() {
                    @Override
                    public Tuple3<String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    @Deprecated
    public static SmartDCPABEFiles load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartDCPABEFiles(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SmartDCPABEFiles load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartDCPABEFiles(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SmartDCPABEFiles load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SmartDCPABEFiles(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SmartDCPABEFiles load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SmartDCPABEFiles(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SmartDCPABEFiles> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String root) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(root)));
        return deployRemoteCall(SmartDCPABEFiles.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SmartDCPABEFiles> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String root) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(root)));
        return deployRemoteCall(SmartDCPABEFiles.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SmartDCPABEFiles> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String root) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(root)));
        return deployRemoteCall(SmartDCPABEFiles.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SmartDCPABEFiles> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String root) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(root)));
        return deployRemoteCall(SmartDCPABEFiles.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
